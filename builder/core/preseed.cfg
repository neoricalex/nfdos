# Newer ubiquity command
ubiquity partman-auto/disk string 
ubiquity partman-auto/method string regular
ubiquity partman-lvm/device_remove_lvm boolean true
ubiquity partman-md/device_remove_md boolean true
ubiquity partman-auto/choose_recipe select atomic

# Locale
d-i debian-installer/locale string pt_BR
d-i console-setup/ask_detect boolean false
d-i console-setup/layoutcode string br
d-i localechooser/translation/warn-light boolean true
d-i debian-installer/language string pt_BR
d-i debian-installer/country string BR
d-i debian-installer/locale string pt_BR
d-i debian-installer/splash boolean false
d-i localechooser/supported-locales multiselect pt_BR.UTF-8
d-i pkgsel/install-language-support boolean true

# clock and timezone settings
d-i time/zone string America/Sao_Paulo
d-i clock-setup/utc boolean false
d-i clock-setup/ntp boolean true

# keyboard selection
d-i console-setup/ask_detect boolean false
d-i console-setup/layoutcode string br
#d-i keyboard-configuration/modelcode string pc105
d-i keyboard-configuration/layoutcode string br
d-i console-keymaps-at/keymap select Brazilian (ABNT2 layout)
#d-i keyboard-configuration/variantcode string intl
d-i keyboard-configuration/xkb-keymap select br
d-i debconf/language string pt_BR:br

# user account setup
d-i passwd/root-login boolean false
d-i passwd/root-password-crypted password $6$..pYhllrtNkHkG$ORhH5UweQqxVZkKApP1zpxRJ/4RaTBu.8znNFaXNFJxA9zdlMzgfqTf2T1mCwfRow/SXuZuyn4CQesf8AfPxF1
d-i passwd/make-user boolean true
d-i passwd/user-fullname string Neo
d-i passwd/username string neo
d-i passwd/user-password password neoricalex
d-i passwd/user-password-again password neoricalex
# mkpasswd -m sha-512 -S $(pwgen -ns 16 1) mypassword
d-i passwd/user-password-crypted password $6$..pYhllrtNkHkG$ORhH5UweQqxVZkKApP1zpxRJ/4RaTBu.8znNFaXNFJxA9zdlMzgfqTf2T1mCwfRow/SXuZuyn4CQesf8AfPxF1
d-i passwd/user-uid string
d-i user-setup/allow-password-weak boolean true
#d-i passwd/user-default-groups string adm cdrom dialout lpadmin plugdev sambashare
d-i user-setup/encrypt-home boolean false

# Network
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string nfdos
d-i netcfg/get_domain string neoricalex.com.br
d-i netcfg/hostname string nfdos

# Static network configuration.
#
# IPv4 example
#d-i netcfg/get_ipaddress string ${NetworkConfigurationIpAddress}
#d-i netcfg/get_netmask string 255.255.255.0
#d-i netcfg/get_gateway string ${NetworkConfigurationGatewayIpAddress}
#d-i netcfg/get_nameservers string ${NetworkConfigurationDnsIpAddress}
#d-i netcfg/confirm_static boolean true

#
# IPv6 example
#d-i netcfg/get_ipaddress string fc00::2
#d-i netcfg/get_netmask string ffff:ffff:ffff:ffff::
#d-i netcfg/get_gateway string fc00::1
#d-i netcfg/get_nameservers string fc00::1
#d-i netcfg/confirm_static boolean true

# disk partitioning
# TIP: you can comment all of this out and do only this step manually.
# More complex recipes are also possible.
#d-i partman-auto/choose_recipe select atomic
#d-i partman/confirm_write_new_label boolean true
#d-i partman/choose_partition select finish
#d-i partman/confirm_nooverwrite boolean true
#d-i partman/confirm boolean true
#d-i partman-auto/purge_lvm_from_device boolean true
#d-i partman-lvm/device_remove_lvm boolean true
#d-i partman-lvm/confirm boolean true
#d-i partman-lvm/confirm_nooverwrite boolean true
#d-i partman-auto-lvm/no_boot boolean true
#d-i partman-md/device_remove_md boolean true
#d-i partman-md/confirm boolean true
#d-i partman-md/confirm_nooverwrite boolean true
#d-i partman-auto/method string regular
#d-i partman-auto-lvm/guided_size string max
#d-i partman-partitioning/confirm_write_new_label boolean true


# This makes partman automatically partition without confirmation, provided
# that you told it what to do using one of the methods below.
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

## Partitioning example
# If the system has free space you can choose to only partition that space.
# This is only honoured if partman-auto/method (below) is not set.
# Alternatives: custom, some_device, some_device_crypto, some_device_lvm.
#d-i partman-auto/init_automatically_partition select biggest_free

# Alternatively, you may specify a disk to partition. If the system has only
# one disk the installer will default to using that, but otherwise the device
# name must be given in traditional, non-devfs format (so e.g. /dev/hda or
# /dev/sda, and not e.g. /dev/discs/disc0/disc).
# For example, to use the first SCSI/SATA hard disk:
#d-i partman-auto/disk string /dev/sda

# In addition, you'll need to specify the method to use.
# The presently available methods are:
# - regular: use the usual partition types for your architecture
# - lvm:     use LVM to partition the disk
# - crypto:  use LVM within an encrypted partition
d-i partman-auto/method string lvm
d-i partman-auto/purge_lvm_from_device boolean true

# If one of the disks that are going to be automatically partitioned
# contains an old LVM configuration, the user will normally receive a
# warning. This can be preseeded away...
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-lvm/device_remove_lvm_span boolean true

# And the same goes for the confirmation to write the lvm partitions.
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true

# For LVM partitioning, you can select how much of the volume group to use
# for logical volumes.
d-i partman-auto-lvm/guided_size string max
#d-i partman-auto-lvm/guided_size string 10GB
#d-i partman-auto-lvm/guided_size string 50%

d-i partman-auto-lvm/new_vg_name string system

# You can choose one of the three predefined partitioning recipes:
# - atomic: all files in one partition
# - home:   separate /home partition
# - multi:  separate /home, /usr, /var, and /tmp partitions
d-i partman-auto/choose_recipe select grub-efi-boot-root

# Or provide a recipe of your own...
# If you have a way to get a recipe file into the d-i environment, you can
# just point at it.
#d-i partman-auto/expert_recipe_file string /hd-media/recipe

d-i partman-partitioning/confirm_write_new_label boolean true

# If you just want to change the default filesystem from ext3 to something
# else, you can do that without providing a full recipe.
d-i partman/default_filesystem string ext4

# If not, you can put an entire recipe into the preconfiguration file in one
# (logical) line. This example creates a small /boot partition, suitable
# swap, and uses the rest of the space for the root partition:
d-i partman-auto/expert_recipe string       \
    grub-efi-boot-root ::                   \
        1 1 1 free                          \
            $bios_boot{ }                   \
            method{ biosgrub }              \
        .                                   \
        256 256 256 fat32                   \
            $primary{ }                     \
            method{ efi }                   \
            format{ }                       \
        .                                   \
        512 512 512 ext4                    \
            $primary{ }                     \
            $bootable{ }                    \
            method{ format }                \
            format{ }                       \
            use_filesystem{ }               \
            filesystem{ ext4 }              \
            mountpoint{ /boot }             \
        .                                   \
        4096 4096 4096 linux-swap           \
            $lvmok{ }                       \
            method{ swap }                  \
            format{ }                       \
        .                                   \
        10000 20000 -1 ext4                 \
            $lvmok{ }                       \
            method{ format }                \
            format{ }                       \
            use_filesystem{ }               \
            filesystem{ ext4 }              \
            mountpoint{ / }                 \
        .


## Controlling how partitions are mounted
# The default is to mount by UUID, but you can also choose "traditional" to
# use traditional device names, or "label" to try filesystem labels before
# falling back to UUIDs.
#d-i partman/mount_style select uuid

d-i partman-partitioning/no_bootable_gpt_biosgrub boolean false
d-i partman-partitioning/no_bootable_gpt_efi boolean false

# enforce usage of GPT - a must have to use EFI!
d-i partman-basicfilesystems/choose_label string gpt
d-i partman-basicfilesystems/default_label string gpt
d-i partman-partitioning/choose_label string gpt
d-i partman-partitioning/default_label string gpt
d-i partman/choose_label string gpt
d-i partman/default_label string gpt

# Keep that one set to true so we end up with a UEFI enabled
# system. If set to false, /var/lib/partman/uefi_ignore will be touched
d-i partman-efi/non_efi_system boolean true

# mirror settings
d-i mirror/country string manual
d-i mirror/http/hostname string archive.ubuntu.com
d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string

# configure apt, and install sshd
d-i apt-setup/restricted boolean true
d-i apt-setup/universe boolean true
d-i apt-setup/multiverse boolean true
d-i apt-setup/backports boolean true
d-i apt-setup/services-select multiselect security
d-i apt-setup/security_host string security.ubuntu.com
d-i apt-setup/security_path string /ubuntu

# Minimum packages (see postinstall.sh). This includes the hyper-v tools
d-i pkgsel/include string openssh-server ntp linux-tools-$(uname -r) linux-cloud-tools-$(uname -r) linux-cloud-tools-common cryptsetup libssl-dev libreadline-dev zlib1g-dev linux-source dkms nfs-common linux-headers-$(uname -r) perl cifs-utils software-properties-common rsync ifupdown

d-i pkgsel/upgrade select safe-upgrade
d-i pkgsel/update-policy select none
d-i pkgsel/updatedb boolean true

# grub boot loader
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i grub-installer/grub2_instead_of_grub_legacy boolean true

# finish installation
d-i finish-install/reboot_in_progress note
d-i finish-install/keep-consoles boolean false
d-i cdrom-detect/eject boolean true
d-i debian-installer/exit/halt boolean false
d-i debian-installer/exit/poweroff boolean false
ubiquity ubiquity/reboot boolean true
ubiquity ubiquity/poweroff boolean false

# Copy the Shim and Grub setup that is installed in EFI/ubuntu so that we can use
# Secure Boot in Hyper-V
#
# NOTE: /target is the mounted target drive
#d-i preseed/late_command string \
#    mkdir -p /target/boot/efi/EFI/BOOT && \
#    cp /target/boot/efi/EFI/ubuntu/* /target/boot/efi/EFI/BOOT && \
#    cd /target/boot/efi/EFI/BOOT/ && mv shimx64.efi BOOTX64.EFI

ubiquity ubiquity/success_command string \
    in-target sh -c 'echo "neo ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/neo' ; \
    in-target sh -c 'chmod +x /var/lib/neoricalex/src/vps/box/nfdos/desktop/late_command.nfdos' ; \
    in-target sh -c 'bash /var/lib/neoricalex/src/vps/box/nfdos/desktop/late_command.nfdos' ;

    #in-target sh -c 'cp /var/lib/neoricalex/nfdos/desktop/neoricalex.service /etc/systemd/system/neoricalex.service' ; \
    #in-target sh -c 'chmod 644 /etc/systemd/system/neoricalex.service' ; \
    #in-target sh -c 'systemctl enable neoricalex.service' ;

# REF: https://help.ubuntu.com/lts/installation-guide/s390x/apbs04.html
